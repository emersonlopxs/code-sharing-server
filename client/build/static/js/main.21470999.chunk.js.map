{"version":3,"sources":["GetCodes.js","CreateCode.js","App.js","serviceWorker.js","index.js"],"names":["GetCodes","state","codes","handleChange","e","change","target","name","value","_this","setState","_this2","this","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","code","data","response","wrap","_context","prev","next","fetch","method","headers","Content-Type","sent","json","console","log","t0","stop","_x","apply","arguments","submitData","map","i","react_default","createElement","className","key","title","date","Link","to","Component","CreateCode","handleSubmit","preventDefault","_data","body","JSON","stringify","action","style","display","onChange","width","height","type","placeholder","id","cols","rows","onClick","App","BrowserRouter","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.21470999.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport './App.css';\n\nclass GetCodes extends Component {\n  state = {\n    codes: []\n  };\n\n  handleChange = e => {\n    let change = {};\n    change[e.target.name] = e.target.value;\n    this.setState(change);\n  };\n\n  componentDidMount() {\n    const submitData = async code => {\n      try {\n        const url = 'https://grim-dracula-74484.herokuapp.com/api/all';\n        const data = await fetch(url, {\n          method: 'GET', // or 'PUT'\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n\n        const response = await data.json();\n        this.setState({ codes: response });\n        console.log(response);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    submitData();\n  }\n  render() {\n    const codes = this.state.codes.map((code, i) => (\n      <div className=\"code\" key={i}>\n        <p>{code.title}</p>\n        <span>{code.date}</span>\n        <br /> <br />\n        <code>{code.code}</code>\n      </div>\n    ));\n\n    return (\n      <div className=\"App\">\n        <h1>Welcome to code sharing!</h1>\n        <Link to=\"/create_code\">Create New</Link>\n\n        {codes}\n      </div>\n    );\n  }\n}\n\nexport default GetCodes;\n","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\nclass CreateCode extends Component {\n  state = {\n    title: '',\n    code: ''\n  };\n\n  handleChange = e => {\n    let change = {};\n    change[e.target.name] = e.target.value;\n    this.setState(change);\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    console.log('hello world!');\n\n    const data = this.state;\n\n    const submitData = async code => {\n      try {\n        const url = 'https://grim-dracula-74484.herokuapp.com/api/';\n        const data = await fetch(url, {\n          method: 'POST', // or 'PUT'\n          body: JSON.stringify(code), // data can be `string` or {object}!\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n\n        const response = await data.json();\n        console.log(response);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    submitData(data);\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <Link to=\"/\">See All Codes</Link>\n        <br />\n        <form action=\"\">\n          <p style={{ display: 'inline' }}>Title: </p>\n          <input\n            onChange={this.handleChange}\n            style={{ width: '400px', height: '20px' }}\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"title\"\n          />\n          <p>Code: </p>\n          <textarea\n            onChange={this.handleChange}\n            name=\"code\"\n            id=\"code\"\n            cols=\"150\"\n            rows=\"40\"\n          />\n          <button type=\"submit\" onClick={this.handleSubmit}>\n            Save\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default CreateCode;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\n\nimport './App.css';\nimport GetCodes from './GetCodes';\nimport CreateCode from './CreateCode';\n\nclass App extends Component {\n  state = {\n    codes: []\n  };\n\n  componentDidMount() {}\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={GetCodes} />\n          <Route path=\"/create_code\" component={CreateCode} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter } from 'react-router-dom';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}